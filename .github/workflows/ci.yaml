# SPDX-FileCopyrightText: 2006-2024 Knut Reinert & Freie Universität Berlin
# SPDX-FileCopyrightText: 2016-2024 Knut Reinert & MPI für molekulare Genetik
# SPDX-License-Identifier: CC0-1.0

name: CI

on:
  push:
    branches:
      - 'main'
  pull_request_target:
  workflow_dispatch:
  schedule:
    - cron: "0 4 * * TUE"

concurrency:
  group: ci
  cancel-in-progress: ${{ github.event_name != 'push' }}

env:
  TZ: Europe/Berlin

defaults:
  run:
    shell: bash -Eeuo pipefail {0}

jobs:
  license_check:
    name: REUSE Compliance
    runs-on: ubuntu-latest
    if: github.repository_owner == 'seqan' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 5
    steps:
      - name: Checkout
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v5
        with:
          submodules: recursive

      # pull_request_target does not checkout the merge commit by default
      - name: Checkout
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v5
        with:
          ref: "refs/pull/${{ github.event.number }}/merge"
          submodules: recursive

      - name: REUSE Compliance Check
        uses: fsfe/reuse-action@v6

  build:
    name: Scavenger Hunt
    needs: [license_check]
    runs-on: ubuntu-latest
    if: github.repository_owner == 'seqan' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 10
    steps:
      - name: Checkout
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v5
        with:
          submodules: recursive

      # pull_request_target does not checkout the merge commit by default
      - name: Checkout
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v5
        with:
          ref: "refs/pull/${{ github.event.number }}/merge"
          submodules: recursive

      - name: Tool Versions
        run: |
          set +eu
          echo "LANG=$LANG" |& tee -a log.txt
          echo "##############################################################################" |& tee -a log.txt
          echo "LC_ALL=$LC_ALL" |& tee -a log.txt
          echo "##############################################################################" |& tee -a log.txt
          bash --version |& tee -a log.txt
          echo "##############################################################################" |& tee -a log.txt
          awk -W version |& tee -a log.txt
          echo "##############################################################################" |& tee -a log.txt
          diff --version |& tee -a log.txt
          echo "##############################################################################" |& tee -a log.txt
          comm --version |& tee -a log.txt
          echo "##############################################################################" |& tee -a log.txt
          sed --version |& tee -a log.txt
          echo "##############################################################################" |& tee -a log.txt
          sort --version |& tee -a log.txt
          echo "##############################################################################" |& tee -a log.txt
          uniq --version |& tee -a log.txt
          echo "##############################################################################" |& tee -a log.txt
          wget --version |& tee -a log.txt
          echo "##############################################################################" |& tee -a log.txt
          curl --version |& tee -a log.txt
          echo "##############################################################################" |& tee -a log.txt
          grep --version |& tee -a log.txt
          echo "##############################################################################" |& tee -a log.txt
          zip -v |& tee -a log.txt
          echo "##############################################################################" |& tee -a log.txt
          unzip -v |& tee -a log.txt
          echo "##############################################################################" |& tee -a log.txt
          jq --version |& tee -a log.txt

      - name: Create Scavenger Hunt
        run: ./create_scavenger_hunt.sh

      - name: Solve Scavenger Hunt
        run: ./test.sh |& tee -a log.txt

      - name: Upload Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: double-zipped-start
          path: start.zip

      - name: Upload Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: solution
          path: log.txt

  deploy:
    name: Deploy Website
    needs: [build]
    runs-on: ubuntu-latest
    if: github.repository_owner == 'seqan' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 10
    steps:
      - name: Get latest Hugo version
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "HUGO_VERSION=$(gh api /repos/gohugoio/hugo/releases/latest -q .tag_name)" >> "${GITHUB_ENV}"
          echo "HUGO_VERSION=v0.145.0" >> "${GITHUB_ENV}" # TODO: Wait for website/themes submodule to be updated

      - name: Install Hugo CLI
        run: |
          wget --quiet --retry-connrefused --output-document "${{ runner.temp }}/hugo.deb" "https://github.com/gohugoio/hugo/releases/download/${HUGO_VERSION}/hugo_extended_${HUGO_VERSION:1}_linux-amd64.deb"
          sudo dpkg -i "${{ runner.temp }}/hugo.deb"

      - name: Checkout
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v5
        with:
          submodules: recursive

      # pull_request_target does not checkout the merge commit by default
      - name: Checkout
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v5
        with:
          ref: "refs/pull/${{ github.event.number }}/merge"
          submodules: recursive

      - name: Download Scavenger Hunt
        uses: actions/download-artifact@v5
        with:
          name: double-zipped-start
          path: website/static

      - name: Download Solution
        uses: actions/download-artifact@v5
        with:
          name: solution
          path: website/static

      - name: Build
        working-directory: website
        env:
          HUGO_ENVIRONMENT: production
        run: |
          chmod o-r static/log.txt
          hugo --minify \
               --baseURL "https://docs.seqan.de/swp" \
               --destination "${GITHUB_WORKSPACE}/build"

      - name: Upload Website
        if: github.repository_owner != 'seqan' && github.event_name != 'pull_request_target'
        uses: actions/upload-artifact@v4
        with:
          name: website
          path: build

      - name: Deploy Preview
        if: github.repository_owner == 'seqan' && github.event_name == 'pull_request_target'
        uses: seqan/actions/documentation_deploy_preview@main
        with:
          deploy_host: ${{ secrets.DEPLOY_HOST }}
          deploy_user: ${{ secrets.DEPLOY_USER }}
          deploy_ssh_key: ${{ secrets.DEPLOY_SSH_KEY }}
          deploy_base_path: ${{ secrets.DEPLOY_PREVIEW_BASE_PATH }}
          source_path_user_doc: build
          token: ${{ secrets.SEQAN_ACTIONS_PAT }}

      - name: Deploy Website
        if: github.repository_owner == 'seqan' && github.event_name != 'pull_request_target'
        uses: seqan/actions/documentation_deploy_production@main
        with:
          deploy_host: ${{ secrets.DEPLOY_HOST }}
          deploy_user: ${{ secrets.DEPLOY_USER }}
          deploy_ssh_key: ${{ secrets.DEPLOY_SSH_KEY }}
          source_path_user_doc: build/
          deploy_path_user_doc: ${{ secrets.DEPLOY_PRODUCTION_BASE_PATH }}

  delete:
      name: Delete Preview
      runs-on: ubuntu-latest
      if: github.repository_owner == 'seqan' && github.event_name == 'pull_request_target' && github.event.action == 'closed'
      steps:
      - name: Delete Preview
        uses: seqan/actions/documentation_delete_preview@main
        with:
          deploy_host: ${{ secrets.DEPLOY_HOST }}
          deploy_user: ${{ secrets.DEPLOY_USER }}
          deploy_ssh_key: ${{ secrets.DEPLOY_SSH_KEY }}
          deploy_base_path: ${{ secrets.DEPLOY_PREVIEW_BASE_PATH }}
